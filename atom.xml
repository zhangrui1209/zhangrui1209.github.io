<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Rayco Zhang]]></title>
  <link href="http://zhangrui1209.github.io/atom.xml" rel="self"/>
  <link href="http://zhangrui1209.github.io/"/>
  <updated>2016-03-03T17:13:19+08:00</updated>
  <id>http://zhangrui1209.github.io/</id>
  <author>
    <name><![CDATA[Rayco]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[通过CocoaPods发布自己的开源库]]></title>
    <link href="http://zhangrui1209.github.io/blog/zhi-zuo-cocoapods.html"/>
    <updated>2016-03-02T14:45:32+08:00</updated>
    <id>http://zhangrui1209.github.io/blog/zhi-zuo-cocoapods</id>
    <content type="html"><![CDATA[<p>CocoaPods官方网站：<a href="https://cocoapods.org/">https://cocoapods.org/</a></p>

<h3 id="github">一、在Github上创建自己的开源库</h3>

<h4 id="section">1、创建</h4>
<p>首先在Github上创建一个空的版本库，比如创建一个名为<strong>MyCustomView</strong>的仓库。<br />
<strong>注意：</strong>一定要给仓库添加<strong>license</strong>。正规的仓库都应该有一个license文件，况且Pods依赖库对这个文件的要求更严，所以必须要有。可以在新建的时候让github创建一个，也可以自己后续再创建。</p>

<h4 id="section-1">2、添加</h4>
<p>将Github上创建好的空仓库clone到本地，并向其中添加创建Pods依赖库所需的文件。<br />
<strong>注意：</strong>以下描述的文件都要放在本地仓库的根目录下面。<br />
<!--more--></p>

<h5 id="podspec">(1)、后缀为.podspec的文件</h5>
<p>这个文件是Pods依赖库的描述文件，每个Pods依赖库必须有且仅有一个该描述文件。文件名称要和我们创建的依赖库名称保持一致，所以MyCustomView库对应的文件名为MyCustomView.podspec。<br />
创建命令：<br />
<code>$ pod spec create MyCustomView</code><br />
使用该命令创建的podspec文件，里面内容太多，很多不是我们需要的，可以精简一下，以下是一个例子：</p>

<pre><code>Pod::Spec.new do |s|
s.name             = "MyCustomView"
s.version          = "1.0.0"
s.summary          = "A custom view used on iOS."
s.description      = &lt;&lt;-DESC
                   It is a custom view used on iOS, which implement by Objective-C.  
                                          DESC
s.homepage         = "https://github.com/username/MyCustomView"  
# s.screenshots      = "www.example.com/screenshots_1", "www.example.com/screenshots_2"  
s.license          = 'MIT'  
s.author           = { "username" =&gt; "username@gmail.com" }  
s.source           = { :git =&gt; "https://github.com/username/MyCustomView.git", :tag =&gt; s.version.to_s }  
# s.social_media_url = 'https://twitter.com/NAME'  

s.platform     = :ios, '4.3'  
# s.ios.deployment_target = '5.0'  
# s.osx.deployment_target = '10.7'  
s.requires_arc = true  

s.source_files = 'MyCustomView/*'  
# s.resources = 'Assets'  

# s.ios.exclude_files = 'Classes/osx'  
# s.osx.exclude_files = 'Classes/ios'  
# s.public_header_files = 'Classes/**/*.h'  
s.frameworks = 'Foundation', 'CoreGraphics', 'UIKit'  

end
</code></pre>

<p>注意几个参数：<br />
<em>s.license</em><br />
Pods依赖库使用的license类型<br />
<em>s.source_files</em><br />
源文件的路径(这个路径是相对podspec文件而言的)<br />
<em>s.frameworks</em><br />
需要用到的frameworks，不需要加.frameworks后缀</p>

<h5 id="license">(2)、LICENSE文件</h5>
<p>CocoaPods强制要求所有的Pods依赖库都必须有license文件，否则验证不会通过。license的类型有很多，可以参考网站<a href="https://tldrlegal.com/">TLDRLegal</a>。</p>

<h5 id="section-2">(3)、库的源文件</h5>
<p>创建一个与库名字相同的子目录，用来存放源码。</p>

<h5 id="demo">(4)、demo工程</h5>
<p>创建一个demo工程，帮助别人能快速使用我们的开源库。</p>

<h5 id="readmemd">(5)、README.md</h5>
<p>该文件用以对仓库进行详细说明。</p>

<p>以上5个是创建Pods依赖库所需最基础的文件，其中1、2、3是必需的，4、5是可选但强烈推荐创建的。</p>

<h4 id="section-3">3、提交</h4>
<p>上一步骤中在本地仓库中添加了不少文件，现在需要将它们提交到Github仓库中去。分两步：</p>

<h5 id="pod">(1)pod验证</h5>
<p>执行以下命令，为pod添加版本号并打上tag： <br />
<code>$ set the new version to 1.0.0</code><br />
<code>$ set the new tag to 1.0.0</code></p>

<p>然后执行pod验证命令：<br />
<code>$ pod lib lint</code></p>

<p>如果一切正常，该命令执行完后会出现：</p>

<pre><code>-&gt; MyCustomView (1.0.0)  

MyCustomView passed validation.
</code></pre>

<p><strong>注意：</strong>在执行pod验证命令的时候，如果打印出任何warning或者error信息，验证都会失败！根据提示修改即可。</p>

<h5 id="section-4">(2)提交</h5>
<p>依次执行以下命令：<br />
<code>$ git add -A &amp;&amp; git commit -m "Release 1.0.0."</code><br />
<code>$ git tag '1.0.0'</code><br />
<code>$ git push --tags</code><br />
<code>$ git push origin master</code></p>

<h3 id="podspeccocoapods">二、将库的podspec文件上传到CocoaPods官方仓库中</h3>
<p>要想一个Pods依赖库真正可用，还需要将我们刚才生成的podspec文件上传到<a href="https://github.com/CocoaPods/Specs">CocoaPods官方的Specs仓库</a>中。</p>

<p>我们能使用的，以及我们使用pod search命令能搜索到的所有Pods依赖库都会把它们的podspec文件上传到这个仓库中，也就是说，只有将我们的podspec文件上传到这个仓库中以后，才能成为一个真正的Pods依赖库，别人才能搜索到并使用。</p>

<p>由于要修改别人的仓库，所以先fork一份该仓库，待修改完成之后再创建一个<strong>pull request</strong>提交给原仓库。</p>

<p>podspec文件在Specs仓库中的保存原则是：<br />
<strong>Pods依赖库同名文件夹—&gt;版本号同名文件夹—&gt;podspec文件</strong></p>

<p>所以按照上面的例子，需要在Specs目录下创建一个名为MyCustomView的子目录，然后在MyCustomView目录下创建一个名为1.0.0的子目录，最后将之前创建好的MyCustomView.podspec文件拷贝到1.0.0目录。</p>

<p>不难理解，如果以后需要对MyCustomView升级，就在MyCustomView文件夹下建立对应版本名称的文件夹，用于保存对应版本的podspec文件即可。</p>

<p>最后，如果CocoaPods官方审核通过了我们提交的pull request之后，想要通过<code>pod search</code>命令搜索到我们的Pods依赖库，需要先执行<code>pod setup</code>命令将所有的Pods依赖库tree更新到本地。然后再去执行<code>pod search MyCustomView</code>就能显示出对应的介绍信息了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过CocoaPods管理项目中用到的开源库]]></title>
    <link href="http://zhangrui1209.github.io/blog/shi-yong-cocoapods.html"/>
    <updated>2016-03-01T14:04:45+08:00</updated>
    <id>http://zhangrui1209.github.io/blog/shi-yong-cocoapods</id>
    <content type="html"><![CDATA[<p>CocoaPods官方网站：<a href="https://cocoapods.org/">https://cocoapods.org/</a></p>

<h3 id="cocoapods">一、安装CocoaPods</h3>
<p>使用 ruby 的 gem 命令下载安装：<br />
<code>$ sudo gem install cocoapods</code><br />
<code>$ pod setup</code></p>

<p>安装过程可能出现的问题：<br />
1) 执行install命令半天没反应<br />
因为Ruby的软件源<a href="https://rubygems.org">https://rubygems.org</a>使用的是亚马逊的云服务，被墙了，需要更新一下Ruby的源，使用如下代码将官方的Ruby源替换成国内淘宝的源：<!--more--><br />
<code>$ gem sources --remove https://rubygems.org/</code><br />
<code>$ gem sources -a https://ruby.taobao.org/</code><br />
<code>$ gem sources -l</code></p>

<p>2) gem版本过老<br />
gem是管理Ruby库和程序的标准包，如果它的版本过低也可能导致安装失败，升级gem即可：<br />
<code>$ sudo gem update --system</code></p>

<h3 id="cocoapods-1">二、使用CocoaPods</h3>
<p>使用CocoaPods时需要创建一个名为Podfile的文件，将项目要使用到的第三方库的的名字列在该文件中：</p>

<pre><code>platform :ios
pod 'Reachability'

platform :ios, '7.0'
pod 'MJRefresh'
pod 'RESideMenu'	
</code></pre>

<p>然后将编辑好的Podfile文件放到项目根目录中，并执行<code>pod install</code>命令：<br />
<code>$ cd "project root directory"</code><br />
<code>$ pod install</code><br />
执行完之后，所有需要的第三方库都已经下载完成并且设置好了编译参数和依赖，注意两点：<br />
1) 使用CocoaPods生成的<strong>.xcworkspace</strong>文件来打开工程，而不是以前的<strong>.xcodeproj</strong>文件。<br />
2) 每次更改了Podfile文件，要重新执行一次<code>pod update</code>命令。</p>

<h3 id="podfilelock">三、Podfile.lock</h3>
<p>执行完<code>pod install</code>之后，会生成一个Podfile.lock文件，该文件用于保存已经安装的Pods依赖库的版本。  Podfile.lock文件最大的用处在于多人开发。应该加入到版本控制里面，不应该把这个文件加入到.gitignore中。因为Podfile.lock会锁定当前各依赖库的版本，之后如果多次执行pod install 不会更改版本，要pod update才会更改Podfile.lock。这样多人协作的时候，可以防止第三方库升级时造成大家各自的第三方库版本不一致。</p>

<h3 id="podfile">四、Podfile</h3>
<p>我们打交道最多的就是Podfile文件。CocoaPods是用ruby实现的，所以Podfile文件的语法就是ruby语法</p>

<h4 id="podfile-1">(1)Podfile文件存放位置</h4>
<p>通常情况下，推荐将Podfile文件放在工程根目录。但其实Podfile文件可以放在任意一个目录下，要做的是在Podfile中用<strong>xcodeproj</strong>关键字指定工程的路径：</p>

<pre><code>xcodeproj "/Users/rayco/Desktop/MyProject/MyProject.xcodeproj"

platform :ios
pod 'Reachability'

platform :ios, '7.0'
pod 'MJRefresh'
pod 'RESideMenu'
</code></pre>

<p>此后，进入Podfile文件所在路径，执行<code>pod install</code>命令就会和之前一样下载这些Pods依赖库，而且生成的相关文件都放在了Podfile所在目录下面，同样，我们需要使用这里生成的<strong>.workspace</strong>文件打开工程</p>

<h4 id="podfiletarget">(2)Podfile和target</h4>
<p>Podfile本质上是用来描述Xcode工程中的targets用的。如果我们不显式指定Podfile对应的target，CocoaPods会创建一个名称为default的隐式target，会和我们工程中的第一个target相对应。<br />
换句话说，如果在Podfile中没有指定target，那么只有工程里的第一个target能够使用Podfile中描述的Pods依赖库。<br />
如果想在一个Podfile中同时描述project中的多个target，根据需求的不同，有不同的实现方式，如下：</p>

<h5 id="targetpods"><strong><em>多个target中使用相同的Pods依赖库</em></strong></h5>

<p>比如，名称为MyProject的target和YourProject的target都需要使用Reachability、MJRefresh、RESideMenu三个Pods依赖库，可以使用<strong>link_with</strong>关键字来实现，将Podfile写成如下方式：</p>

<pre><code>link_with 'MyProject', 'YourProject'
platform :ios
pod 'Reachability',  '~&gt; 3.0.0'

platform :ios, '7.0'
pod 'MJRefresh'
pod 'RESideMenu'
</code></pre>

<p>这种写法就实现了MyProject和YourProject两个target共用相同的Pods依赖库。</p>

<h5 id="targetpods-1"><strong><em>不同的target使用不同的Pods依赖库</em></strong></h5>
<p>MyProject这个target使用的是Reachability、MJRefresh、RESideMenu三个依赖库，但YourProject这个target只需要使用MBProgressHUD这一个依赖库，这时可以使用<strong>target</strong>关键字，Podfile的描述方式如下：</p>

<pre><code>target :'MyProject' do
platform :ios
pod 'Reachability'

platform :ios, '7.0'
pod 'MJRefresh'
pod 'RESideMenu'
end

target :'YourProject' do
pod 'MBProgressHUD'
end
</code></pre>

<p>其中，<strong>do/end</strong>作为开始和结束标识符。</p>

<h4 id="podfilepods">(3)使用Podfile管理Pods依赖库版本</h4>
<p>引入依赖库时，需要显示或隐式注明引用的依赖库版本，具体写法和表示含义如下：</p>

<pre><code>pod 'AFNetworking'             //不显式指定依赖库版本，表示每次都获取最新版本
pod 'AFNetworking', '2.0'      //只使用2.0版本
pod 'AFNetworking', '&gt; 2.0'    //使用高于2.0的版本
pod 'AFNetworking', '&gt;= 2.0'   //使用大于或等于2.0的版本
pod 'AFNetworking', '&lt; 2.0'    //使用小于2.0的版本
pod 'AFNetworking', '&lt;= 2.0'   //使用小于或等于2.0的版本
pod 'AFNetworking', '~&gt; 0.1.2' //使用大于等于0.1.2但小于0.2的版本
pod 'AFNetworking', '~&gt;0.1'    //使用大于等于0.1但小于1.0的版本
pod 'AFNetworking', '~&gt;0'      //高于0的版本，写这个限制和什么都不写是一个效果，都表示使用最新版本  
</code></pre>

<h3 id="cocoapods-2">五、CocoaPods常用命令</h3>

<h4 id="pod-install">(1)pod install</h4>
<p>根据Podfile文件指定的内容，安装依赖库，如果有Podfile.lock文件而且对应的Podfile文件未被修改，则会根据Podfile.lock文件指定的版本安装。<br />
每次更新了Podfile文件时，都需要重新执行该命令，以便重新安装Pods依赖库。</p>

<h4 id="pod-update">(2)pod update</h4>
<p>如果Podfile中指定的依赖库版本不是写死的，当对应的依赖库有了更新，无论有没有Podfile.lock文件都会去获取Podfile文件描述的允许获取到的最新依赖库版本。</p>

<h4 id="pod-search">(3)pod search</h4>
<p>格式：<br />
<code>$ pod search DTCoreText</code><br />
该命令按名称搜索可用的Pods依赖库，执行结果如下：</p>

<pre><code>-&gt; DTCoreText (1.6.17)
   Methods to allow using HTML code with CoreText.
   pod 'DTCoreText', '~&gt; 1.6.17'
   - Homepage: https://github.com/Cocoanetics/DTCoreText
   - Source:   https://github.com/Cocoanetics/DTCoreText.git
   - Versions: 1.6.17, 1.6.16, 1.6.15, 1.6.14, 1.6.13, 1.6.12, 1.6.11, 1.6.10, 1.6.9, 1.6.8, 1.6.7, 1.6.6, 1.6.5, 1.6.4, 1.6.3, 1.6.2, 1.6.1, 1.6.0, 1.5.3, 1.5.2, 1.5.1, 1.5.0, 1.4.3, 1.4.2, 1.4.1, 1.4.0, 1.3.2, 1.3.1, 1.3.0, 1.2.1, 1.2.0, 1.1.0, 1.0.2, 1.0.1, 1.0.0
   [master repo]
</code></pre>

<p>搜索结果描述了DTCoreText库的简要信息。我们需要的是第三行：</p>

<pre><code>pod 'DTCoreText', '~&gt; 1.6.17'
</code></pre>

<p>这是需要添加到Podfile文件中的。</p>

<h4 id="pod-setup">(4)pod setup</h4>
<p>格式：<br />
<code>$ pod setup</code><br />
这条命令用于更新本地电脑上的保存的Pods依赖库tree。由于每天有很多人会创建或者更新Pods依赖库，这条命令执行的时候会很慢，要耐心等待。我们需要经常执行这条命令，否则有新的Pods依赖库的时候执行pod search命令搜不出来。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2.发布博客]]></title>
    <link href="http://zhangrui1209.github.io/blog/2-dot-fa-bu-bo-ke.html"/>
    <updated>2016-01-19T22:45:06+08:00</updated>
    <id>http://zhangrui1209.github.io/blog/2-dot-fa-bu-bo-ke</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#github" id="markdown-toc-github">1、新建Github仓库</a></li>
  <li><a href="#octopressgithub" id="markdown-toc-octopressgithub">2、发布Octopress到Github</a>    <ul>
      <li><a href="#github-page" id="markdown-toc-github-page">(1) 建立github page</a></li>
      <li><a href="#octopress" id="markdown-toc-octopress">(2) 安装Octopress默认主题</a></li>
      <li><a href="#section" id="markdown-toc-section">(3) 生成静态页面</a></li>
      <li><a href="#section-1" id="markdown-toc-section-1">(4) 本地预览</a></li>
      <li><a href="#github-1" id="markdown-toc-github-1">(5) 发布博客到Github</a></li>
      <li><a href="#source" id="markdown-toc-source">(6) 提交源文件，即source分支</a></li>
      <li><a href="#githubssh" id="markdown-toc-githubssh">附录-给github设置SSH</a>        <ul>
          <li><a href="#a-ssh" id="markdown-toc-a-ssh">A. 创建SSH密钥（通常在用户主目录下进行）</a></li>
          <li><a href="#b-github" id="markdown-toc-b-github">B. 添加公有密钥到github</a></li>
          <li><a href="#c-" id="markdown-toc-c-">C. 在本地确认设置</a></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>本地环境配置完毕后就可以把Octopress推到Github上了。</p>

<h3 id="github">1、新建Github仓库</h3>

<p>仓库名字必须是username.github.io，其中username是你的github用户名。描述和Readme 可选，创建即可。<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/github-repo.png" alt="github-repo" /></p>

<!--more-->

<h3 id="octopressgithub">2、发布Octopress到Github</h3>

<h4 id="github-page">(1) 建立github page</h4>
<p>进入octopress目录，执行如下命令：<br />
<code>$ rake setup_github_pages</code><br />
在Repository url输入刚刚创建的仓库地址：<br />
git@github.com:[username]/[username].github.com.git，自行替换username<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/setup-github-page.png" alt="setup-github-page" /><br />
从打印信息可得到以下信息：<br />
1. 已经将默认的remote(即Github上的仓库名)设置为origin<br />
2. 将master分支重命名为source，即将源码分支命名成了source，用来提交博客源文件<br />
3. 新建了_deploy目录，并在该目录下初始化了一个空的Git仓库，且添加了index.html</p>

<h4 id="octopress">(2) 安装Octopress默认主题</h4>
<p><code>$ rake install</code><br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/rake-install.png" alt="rake-install" /></p>

<h4 id="section">(3) 生成静态页面</h4>
<p><code>$ rake generate</code><br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/rake-generate.png" alt="rake-generate" /></p>

<h4 id="section-1">(4) 本地预览</h4>
<p><code>$ rake preview</code><br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/rake-preview.png" alt="rake-preview" /><br />
本地预览地址：<a href="http://localhost:4000/">http://localhost:4000/</a>这时候打开本地预览地址，可以看到如下页面，使用 Ctrl+C停止预览。<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/localhost.png" alt="localhost" /></p>

<h4 id="github-1">(5) 发布博客到Github</h4>
<p><code>$ rake deploy</code><br />
这步会帮我们把master分支提交到Github，但是平时我们编辑的则是source分支，source分支则不会提交，需要我们手动提交。这里采用的是SSH方式推送的，如果出错，可能是没有创建SSH密钥，请按照附录方法设置。<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/rake-deploy.png" alt="rake-deploy" /><br />
这时候打开<a href="http://zhangrui1209.github.io">http://zhangrui1209.github.io</a>，可以看到如下页面（如果是404页面，那等一等，第一次deploy可能需要10分钟左右才能看到）：<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/404.png" alt="404" /><br />
正确显示效果<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/github-io.png" alt="github-io" /></p>

<h4 id="source">(6) 提交源文件，即source分支</h4>
<p><code>$ git add .</code><br />
<code>$ git commit -m “commit message”</code><br />
<code>$ git push origin source</code><br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/push-source.png" alt="push-source" /></p>

<h4 id="githubssh">附录-给github设置SSH</h4>

<h6 id="a-ssh">A. 创建SSH密钥（通常在用户主目录下进行）</h6>
<p><code>$ ssh-keygen -t rsa -C "YourEmail@example.com"</code><br />
确认目录和密码短语，可以直接使用默认，回车就行。</p>

<h5 id="b-github">B. 添加公有密钥到github</h5>
<p>在刚才确认的目录下可以看到生成了.ssh目录，里面有两个文件id_rsa（私有密钥）和id_rsa.pub（公有密钥）。登录github→Account Settings→SSH keys→Add SSH key添加一个SSH key，标题任意，把id_rsa.pub的内容拷入即可。</p>

<h5 id="c-">C. 在本地确认设置</h5>
<p><code>$ ssh -T git@github.com</code></p>

<p>…</p>

<p>Hi xxx! You’ve successfully authenticated…</p>

<p>有上面的提示就OK了，如果设置了密码短语，需要输入密码短语。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1.环境搭建]]></title>
    <link href="http://zhangrui1209.github.io/blog/1-dot-huan-jing-da-jian.html"/>
    <updated>2016-01-19T21:26:36+08:00</updated>
    <id>http://zhangrui1209.github.io/blog/1-dot-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#windows" id="markdown-toc-windows">Windows环境</a>    <ul>
      <li><a href="#git" id="markdown-toc-git">1、安装并配置Git</a></li>
      <li><a href="#ruby" id="markdown-toc-ruby">2、安装并配置Ruby</a></li>
      <li><a href="#devkit" id="markdown-toc-devkit">3、安装DevKit</a></li>
      <li><a href="#utf-8windows" id="markdown-toc-utf-8windows">4、为支持UTF-8编码，配置Windows环境变量如下：</a></li>
      <li><a href="#octopress" id="markdown-toc-octopress">5、克隆Octopress库</a></li>
      <li><a href="#octopress-1" id="markdown-toc-octopress-1">6、安装Octopress依赖项</a></li>
      <li><a href="#jqueryminjsrequest-url" id="markdown-toc-jqueryminjsrequest-url">7、更改jquery.min.js的Request URL</a></li>
    </ul>
  </li>
  <li><a href="#mac" id="markdown-toc-mac">Mac环境：</a></li>
</ul>

<h2 id="windows">Windows环境</h2>

<h3 id="git">1、安装并配置Git</h3>

<p>下载地址：<a href="http://git-scm.com/">http://git-scm.com/</a><br />
安装好git后，配置user.name和user.email<br />
<code>$ git config --global user.name "rayco"</code><br />
<code>$ git config --global user.email "rayco.zhang@gmail.com"</code></p>

<h3 id="ruby">2、安装并配置Ruby</h3>

<p>下载地址：<a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a><br />
将ruby安装到一个没有空格，没有中文的路径下（避免后面在执行bundle install时报错）。安装时勾选Add Ruby executables to your PATH，将ruby加入系统环境路径。<br />
<!--more-->
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/rubyinstall.png" alt="rubyinstall" /><br />
安装完成后在cmd执行：<br />
<code>&gt; ruby -v</code><br />
确认是否添加成功。<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/ruby-v.png" alt="ruby-v" /></p>

<p>替换更新源（gem是基于ruby的一些开发工具包）<br />
<code>&gt; gem sources -a https://ruby.taobao.org/</code><br />
<code>&gt; gem sources -r https://rubygems.org/</code><br />
<code>&gt; gem sources -l</code><br />
因为若不翻墙，ruby网站上不去，所以需要更换ruby的更新源，第一个是添加，第二个是删除，第三个是显示，如果显示输出<a href="https://ruby.taobao.org/">https://ruby.taobao.org/</a>，就对了。<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/gem-sources.png" alt="ruby-v" /></p>

<h3 id="devkit">3、安装DevKit</h3>

<p>下载地址：<a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a><br />
下载完后解压到D:\DevKit，打开cmd，执行如下命令：<br />
<code>&gt; d:</code><br />
<code>&gt; cd d:DevKit</code><br />
<code>&gt; ruby dk.rb init</code><br />
<code>&gt; ruby dk.rb install</code><br />
如果执行ruby dk.rb install时出现Invalid configuration or no Rubies listed. Please fix ‘config.yml’ and rerun ‘ruby dk.rb install’<br />
则打开DevKit目录下的config.yml文件，将ruby安装目录的绝对路径添加进去，然后重新执行ruby dk.rb install<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/devkit.png" alt="devkit" /><br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/configyml.png" alt="configyml" /></p>

<h3 id="utf-8windows">4、为支持UTF-8编码，配置Windows环境变量如下：</h3>

<p>LANG=zh_CN.UTF-8<br />
LC_ALL=zh_CN.UTF-8</p>

<h3 id="octopress">5、克隆Octopress库</h3>

<p>进入你要存放博客源码的目录，比如直接在D盘根目录。<br />
在D盘根目录右键选择Git Bash Here，打开git的命令行，然后执行：<br />
<code>$ git clone git://github.com/imathis/octopress.git</code><br />
将Octopress源码克隆到本地<br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/clone-octopress.png" alt="clone-octopress" /><br />
进入octopress文件夹，用文本工具打开Gemfile文件，将<code>source "https://rubygems.org"</code>替换为<code>source "https://ruby.taobao.org"</code></p>

<h3 id="octopress-1">6、安装Octopress依赖项</h3>

<p>进入octopress目录，运行如下命令：<br />
<code>$ gem install bundler</code><br />
<code>$ bundle install</code><br />
<img src="https://raw.githubusercontent.com/zhangrui1209/MarkdownPictures/master/octopress/bundlepng.png" alt="bundle" /><br />
如果出现错误，请尝试更换ruby版本</p>

<h3 id="jqueryminjsrequest-url">7、更改jquery.min.js的Request URL</h3>

<p>在国内环境下加载页面速度很慢，用google浏览器检查发现，jquery.min.js和widgets.js的请求失败。是由于jquery.min.js和widgets.js默认的Request URL如下：<br />
<code>http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js</code><br />
<code>http://platform.twitter.com/widgets.js</code><br />
由于被墙，在国内环境下打开博客时，加载速度很慢。所以将jquery.min.js的Request URL改为国内可用的(主要修改jquery.min.js，widgets.js可先不管)。打开octopress/source/_includes目录下的head.html文件，将<br />
<code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;</code><br />
替换为<br />
<code>&lt;script src="//libs.baidu.com/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;</code></p>

<h2 id="mac">Mac环境：</h2>

<p>Mac环境下默认已经安装了Git和Ruby，可以不用另外安装，除非版本不匹配，需要别的版本，安装即可。只是注意也要修改Ruby的更新源：<br />
<code>&gt; gem sources -a https://ruby.taobao.org/</code><br />
<code>&gt; gem sources -r https://rubygems.org/</code><br />
<code>&gt; gem sources -l</code><br />
剩下的步骤都同Windows一样。同样注意先将octopress目录下Gemfile文件中的<code>source "https://rubygems.org"</code>替换为<code>source "https://ruby.taobao.org"</code></p>

<p>octopress/source/_includes目录下的head.html文件中的<br />
<code>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;</code><br />
替换为<br />
<code>&lt;script src="//libs.baidu.com/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;</code></p>
]]></content>
  </entry>
  
</feed>
